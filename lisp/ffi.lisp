(cl:in-package :lightningfn-ffi)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defcfun "fn_jit_wordsize" :int)
  (when (not (boundp '+wordsize+))
    (defconstant +wordsize+ (fn-jit-wordsize))))

(defmacro if-wordsize-32 (&body body)
  `(eval-when (:compile-toplevel :load-toplevel :execute)
     (when (eq +wordsize+ 32)
       ,@body)))
(defmacro if-wordsize-64 (&body body)
  `(eval-when (:compile-toplevel :load-toplevel :execute)
     (when (eq +wordsize+ 64)
       ,@body)))

(defctype jit-int8-t (:int8))
(defctype jit-uint8-t (:uint8))
(defctype jit-int16-t (:int16))
(defctype jit-uint16-t (:uint16))
(defctype jit-int32-t (:int32))
(defctype jit-uint32-t (:uint32))
(defctype jit-int64-t (:int64))
(defctype jit-uint64-t (:uint64))
(if-wordsize-32
  (defctype jit-word-t jit-int32-t)
  (defctype jit-uword-t jit-uint32-t))
(if-wordsize-64
  (defctype jit-word-t jit-int64-t)
  (defctype jit-uword-t jit-uint64-t))
(defctype jit-float32-t (:float))
(defctype jit-float64-t (:double))
(defctype jit-pointer-t (:pointer :void))
(define-foreign-type jit-bool-t ()
  ()
  (:actual-type jit-int32-t)
  (:simple-parser jit-bool))
(defmethod translate-from-foreign (value (type jit-bool-t))
  (not (zerop value)))
(defctype jit-gpr-t jit-int32-t)
(defctype jit-fpr-t jit-int32-t)

(defcstruct (jit-node-t :size 0))
;;TODO: remove when not needed anymore. (defcstruct (jit-state-t :size 11000)) ;the size was determined by doing "free"; sbcl --eval "(loop for i below 10000 do (lightningfn-ffi::fn-jit-new-state))"; "free"
(defclass jit-state ()
  ((ptr :initarg :ptr :initform (lightningfn-ffi::fn-jit-new-state) :reader jit-state-ptr :documentation "Foreign pointer from fn-jit-new-state")
   (clear-state-manually :initarg :clear-state-manually :initform nil :reader jit-state-clear-state-manually :type boolean :documentation "If NIL, #'FN-JIT-CLEAR-STATE-UNWRAPPED is called when the JIT-STATE is garbage collected, and not otherwise."))
  (:documentation "jit state object (containing a pointer to jit_state_t)"))
(define-foreign-type jit-state-t-ptr ()
  ()
  (:actual-type :pointer)
  (:simple-parser jit-state))
(defmethod initialize-instance :after ((self jit-state) &key)
  (let ((ptr (jit-state-ptr self))
	(clear-state-manually (jit-state-clear-state-manually self)))
    ;;(format t "initialize-instance self:~A ptr:~A clear-state-manually:~A~%" self ptr clear-state-manually)
    (tg:finalize self (if clear-state-manually
			  (lambda ()
			    (lightningfn-ffi::fn-jit-destroy-state-unwrapped ptr))
			  (lambda ()
			    (lightningfn-ffi::fn-jit-clear-state-unwrapped ptr)
			    (lightningfn-ffi::fn-jit-destroy-state-unwrapped ptr))))))
(defmethod translate-from-foreign (ptr (type jit-state))
  (initialize-instance 'jit-state :ptr ptr))
(defmethod translate-to-foreign (jit (type jit-state-t-ptr))
  "Extract the pointer from an JIT-state."
  (jit-state-ptr jit))

(defctype jit-alloc-func-ptr :pointer) ;TODO: find out how to declare "typedef void* (*jit_alloc_func_ptr)     (size_t);"
(defctype jit-realloc-func-ptr :pointer) ;TODO: find out how to declare "typedef void* (*jit_realloc_func_ptr)   (void*, size_t);"
(defctype jit-free-func-ptr :pointer) ;TODO: find out how to declare "typedef void  (*jit_free_func_ptr)      (void*);"

(defctype jit-node-t-ptr (:pointer (:struct jit-node-t)))
;;TODO: remove this line when not needed anymore. (defctype jit-state-t-ptr (:pointer jit-state))
(defctype jit-word-t-ptr (:pointer jit-word-t))

;; Functions

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defstruct fn-jit-function
    (symbol nil :type symbol)
    (args nil :type list))
  
  (defvar *fn-jit-inventory* nil "A list of all FN_JIT_* functions to be exported."))

(defmacro defcfun* (name-and-options return-type &body args)
  "Call CFFI:DEFCFUN, but store the arguments to it in *FN-JIT-FUNCTIONS-INVENTORY*."
  (let ((symbol (gensym "SYMBOL"))
	(entry (gensym "ENTRY")))
    `(let ((,symbol (defcfun ,name-and-options ,return-type ,@args)))
       (let ((,entry (make-fn-jit-function :symbol ,symbol :args ',args)))
	 (push ,entry *fn-jit-inventory*)))))

(defcfun "init_fn_jit" :void (progname :string))
(defcfun "finish_fn_jit" :void)

(defcfun "fn_jit_r" jit-gpr-t (index jit-int8-t))
(defcfun "fn_jit_v" jit-gpr-t (index jit-int8-t))
(defcfun "fn_jit_f" jit-fpr-t (index jit-int8-t))
(defcfun "fn_jit_r_num" jit-int8-t)
(defcfun "fn_jit_v_num" jit-int8-t)
(defcfun "fn_jit_f_num" jit-int8-t)
(defcfun "fn_jit_new_state" jit-state)
;; the functions #'FN-JIT-CLEAR-STATE-UNWRAPPED and #'FN-JIT-DESTROY-STATE-UNWRAPPED have to operate on the unwrapped pointer (of type "jit_state_t*"), because the function passed to #'TG:FINALIZE must not close over the JIT-STATE object.
(defcfun ("fn_jit_clear_state" fn-jit-clear-state-unwrapped) :void (jit :pointer))
(defcfun ("fn_jit_destroy_state" fn-jit-destroy-state-unwrapped) :void (jit :pointer))
(defcfun* "fn_jit_address" jit-pointer-t (jit jit-state) (node jit-node-t-ptr))
(defcfun* "fn_jit_name" jit-node-t-ptr (jit jit-state) (name :string))
(defcfun* "fn_jit_note" jit-node-t-ptr (jit jit-state) (name :string) (line :int))
(defcfun* "fn_jit_label" jit-node-t-ptr (jit jit-state))
(defcfun* "fn_jit_forward" jit-node-t-ptr (jit jit-state))
(defcfun* "fn_jit_indirect" jit-node-t-ptr (jit jit-state))
(defcfun* "fn_jit_link" :void (jit jit-state) (node jit-node-t-ptr))
(defcfun* "fn_jit_forward_p" jit-bool (jit jit-state) (node jit-node-t-ptr))
(defcfun* "fn_jit_indirect_p" jit-bool (jit jit-state) (node jit-node-t-ptr))
(defcfun* "fn_jit_target_p" jit-bool (jit jit-state) (node jit-node-t-ptr))
(defcfun* "fn_jit_prolog" :void (jit jit-state))
(defcfun* "fn_jit_allocai" jit-int32-t (jit jit-state) (length jit-int32-t))

(defmacro def-call-jit-type (basename type (return-type &rest args) &key (name (string type)))
  (flet ((concatenate* (prefix middle &optional suffix)
	   (if (equal suffix "")
	       prefix
	       (concatenate 'string prefix middle suffix))))
    (let* ((fn-name-lisp (concatenate 'string "FN-JIT-" basename))
	   (fn-name-foreign (concatenate 'string "fn_jit_" basename))
	   (lisp-name (intern (map 'string #'char-upcase (concatenate* fn-name-lisp "-" (string type)))))
	   (foreign-name (map 'string #'char-downcase (concatenate* fn-name-foreign "_" name))))
      `(defcfun* (,lisp-name ,foreign-name) ,return-type ,@args))))

(defmacro def-getarg (type &key (name (string type)) (reg-type 'jit-gpr-t))
  `(def-call-jit-type "getarg" ,type (:void (jit jit-state) (reg ,reg-type) (arg jit-node-t-ptr)) :name ,name))
(def-getarg c)
(def-getarg uc)
(def-getarg s)
(def-getarg us)
(def-getarg i)
(def-getarg f :reg-type jit-fpr-t)
(def-getarg d :reg-type jit-fpr-t)
(if-wordsize-32
  (def-getarg "" :name "i"))
(if-wordsize-64
  (def-getarg ui)
  (def-getarg l)
  (def-getarg "" :name "l"))

(defmacro def-putargr (type &key (reg-type 'jit-gpr-t))
  `(def-call-jit-type "putargr" ,type (:void (jit jit-state) (reg ,reg-type) (arg jit-node-t-ptr))))
(def-putargr "")
(def-putargr f :reg-type jit-fpr-t)
(def-putargr d :reg-type jit-fpr-t)

(defcfun* "fn_jit_putargi" :void (jit jit-state) (val jit-word-t) (arg jit-node-t-ptr))
(defcfun* "fn_jit_putargi_p" :void (jit jit-state) (val jit-pointer-t) (arg jit-node-t-ptr))
(defcfun* "fn_jit_putargi_f" :void (jit jit-state) (val jit-float32-t) (arg jit-node-t-ptr))
(defcfun* "fn_jit_putargi_d" :void (jit jit-state) (val jit-float64-t) (arg jit-node-t-ptr))

(defcfun* "fn_jit_prepare" :void (jit jit-state))
(defcfun* "fn_jit_ellipsis" :void (jit jit-state))
(defcfun* "fn_jit_pushargr" :void (jit jit-state) (reg jit-gpr-t))
(defcfun* "fn_jit_pushargi" :void (jit jit-state) (val jit-word-t))
(defcfun* "fn_jit_pushargi_p" :void (jit jit-state) (val jit-pointer-t))
(defcfun* "fn_jit_finishr" :void (jit jit-state) (reg jit-gpr-t))
(defcfun* "fn_jit_finishi" jit-node-t-ptr (jit jit-state) (imm jit-pointer-t))
(defcfun* "fn_jit_ret" :void (jit jit-state))
(defcfun* "fn_jit_retr" :void (jit jit-state) (reg jit-gpr-t))
(defcfun* "fn_jit_reti" :void (jit jit-state) (imm jit-word-t))
(defcfun* "fn_jit_reti_p" :void (jit jit-state) (imm jit-pointer-t))

(defmacro def-retval (type &key (name (string type)) (reg-type 'jit-gpr-t))
  `(def-call-jit-type "retval" ,type (:void (jit jit-state) (reg ,reg-type)) :name ,name))
(def-retval c)
(def-retval uc)
(def-retval s)
(def-retval us)
(def-retval i)
(def-retval f :reg-type jit-fpr-t)
(def-retval d :reg-type jit-fpr-t)
(if-wordsize-32
  (def-retval "" :name "i"))
(if-wordsize-64
  (def-retval ui)
  (def-retval l)
  (def-retval "" :name "l"))

(defcfun* "fn_jit_epilog" :void (jit jit-state))
(defcfun* "fn_jit_patch" :void (jit jit-state) (addr jit-node-t-ptr))
(defcfun* "fn_jit_patch_at" :void (jit jit-state) (addr jit-node-t-ptr) (label jit-node-t-ptr))
(defcfun* "fn_jit_patch_abs" :void (jit jit-state) (addr jit-node-t-ptr) (ptr jit-pointer-t))
(defcfun* "fn_jit_realize" :void (jit jit-state))
(defcfun* "fn_jit_get_code" jit-pointer-t (jit jit-state) (code-size-ptr jit-pointer-t))
(defcfun* "fn_jit_set_code" :void (jit jit-state) (code jit-pointer-t) (size jit-word-t))
(defcfun* "fn_jit_get_data" jit-pointer-t (jit jit-state) (data-size-ptr jit-pointer-t) (note-size-ptr jit-pointer-t))
(defcfun* "fn_jit_set_data" :void (jit jit-state) (data jit-pointer-t) (size jit-word-t) (flags jit-word-t)) ;TODO: add flags constants
(defcfun* "fn_jit_frame" :void (jit jit-state) (bytes jit-int32-t))
(defcfun* "fn_jit_tramp" :void (jit jit-state) (bytes jit-int32-t))
(defcfun* "fn_jit_emit" jit-pointer-t (jit jit-state))
(defcfun* ("fn_jit_print" fn-jit-print-jit) :void (jit jit-state))

(defmacro def-arg (type &key (name (string type)))
  `(def-call-jit-type "arg" ,type (jit-node-t-ptr (jit jit-state)) :name ,name))
(def-arg "")
(def-arg f)
(def-arg d)

(defcfun* "fn_jit_pushargr_f" :void (jit jit-state) (reg jit-fpr-t))
(defcfun* "fn_jit_pushargr_d" :void (jit jit-state) (reg jit-fpr-t))
(defcfun* "fn_jit_pushargi_f" :void (jit jit-state) (imm jit-float32-t))
(defcfun* "fn_jit_pushargi_d" :void (jit jit-state) (imm jit-float64-t))
(defcfun* "fn_jit_retr_f" :void (jit jit-state) (reg jit-fpr-t))
(defcfun* "fn_jit_retr_d" :void (jit jit-state) (reg jit-fpr-t))
(defcfun* "fn_jit_reti_f" :void (jit jit-state) (imm jit-float32-t))
(defcfun* "fn_jit_reti_d" :void (jit jit-state) (imm jit-float64-t))

(defmacro def-new-node (basename &rest args)
  (let* ((str (string basename))
	 (lisp-str (cffi:translate-name-to-foreign str *package* t))
	 (lisp-name (intern (map 'string #'char-upcase (concatenate 'string "FN-JIT-" lisp-str))))
	 (foreign-name (map 'string #'char-downcase (concatenate 'string "fn_jit_" str))))
    `(defcfun* (,lisp-name ,foreign-name) jit-node-t-ptr ,@args)))

;; to generate the "(def-new-node-* XYZ)" forms, use: (these hacks should really be handled by gen.py itself, maybe by adding a flag that determines whether the C source file should be generated or the LISP-forms)
;;   ./listtolisp.py '(def-new-node-w ' ')' '["live","align","jmpr","callr"]'
;; or
;;   ./hashtolisp.py '(def-new-node-ww ' ')' '{"ntohr_us":"htonr_us","ntohr_ui":"htonr_ui"}'
(defmacro def-new-node-w (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-gpr-t)))
(def-new-node-w live)
(def-new-node-w align)
(def-new-node-w jmpr)
(def-new-node-w callr)

(defmacro def-new-node-p (basename)
  `(def-new-node ,basename (jit jit-state) (u-ptr jit-pointer-t)))
(def-new-node-p jmpi)
(def-new-node-p calli)

(defmacro def-new-node-ww (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-gpr-t) (v jit-gpr-t)))
(def-new-node-ww negr)
(def-new-node-ww comr)
(def-new-node-ww movr)
(def-new-node-ww movi)
(def-new-node-ww extr_c)
(def-new-node-ww extr_uc)
(def-new-node-ww extr_s)
(def-new-node-ww extr_us)
(def-new-node-ww htonr_us)
(def-new-node-ww htonr_ui)
(def-new-node-ww ldr_c)
(def-new-node-ww ldr_uc)
(def-new-node-ww ldr_s)
(def-new-node-ww ldr_us)
(def-new-node-ww ldr_i)
(def-new-node-ww str_c)
(def-new-node-ww str_s)
(def-new-node-ww str_i)
(def-new-node-ww negr_f)
(def-new-node-ww absr_f)
(def-new-node-ww sqrtr_f)
(def-new-node-ww truncr_f_i)
(def-new-node-ww extr_f)
(def-new-node-ww extr_d_f)
(def-new-node-ww movr_f)
(def-new-node-ww ldr_f)
(def-new-node-ww str_f)
(def-new-node-ww negr_d)
(def-new-node-ww absr_d)
(def-new-node-ww sqrtr_d)
(def-new-node-ww truncr_d_i)
(def-new-node-ww extr_d)
(def-new-node-ww extr_f_d)
(def-new-node-ww movr_d)
(def-new-node-ww ldr_d)
(def-new-node-ww str_d)
(def-new-node-ww movr_w_f)
(def-new-node-ww movr_w_d)
(def-new-node-ww movr_f_w)
(def-new-node-ww movr_d_w)
(def-new-node-ww ntohr_ui)
(def-new-node-ww ntohr_us)
(if-wordsize-32
  (def-new-node-ww htonr)
  (def-new-node-ww ntohr)
  (def-new-node-ww str)
  (def-new-node-ww truncr_f)
  (def-new-node-ww truncr_d))
(if-wordsize-64
  (def-new-node-ww extr_i)
  (def-new-node-ww extr_ui)
  (def-new-node-ww ldr_ui)
  (def-new-node-ww ldr_l)
  (def-new-node-ww str_l)
  (def-new-node-ww truncr_f_l)
  (def-new-node-ww truncr_d_l)
  (def-new-node-ww htonr_ul)
  (def-new-node-ww ntohr_ul)
  (def-new-node-ww htonr)
  (def-new-node-ww ntohr)
  (def-new-node-ww str)
  (def-new-node-ww truncr_f)
  (def-new-node-ww truncr_d))

(defmacro def-new-node-wp (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-word-t) (v jit-pointer-t)))
(def-new-node-wp ldi_c)
(def-new-node-wp ldi_uc)
(def-new-node-wp ldi_s)
(def-new-node-wp ldi_us)
(def-new-node-wp ldi_i)
(def-new-node-wp ldi_f)
(def-new-node-wp ldi_d)
(if-wordsize-32
  (def-new-node-wp ldr)
  (def-new-node-wp ldi))
(if-wordsize-64
  (def-new-node-wp ldi_ui)
  (def-new-node-wp ldi_l)
  (def-new-node-wp ldr)
  (def-new-node-wp ldi))

(defmacro def-new-node-pw (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-pointer-t) (v jit-word-t)))
(def-new-node-pw sti_c)
(def-new-node-pw sti_s)
(def-new-node-pw sti_i)
(def-new-node-pw sti_f)
(def-new-node-pw sti_d)
(if-wordsize-32
  (def-new-node-pw sti))
(if-wordsize-64
  (def-new-node-pw sti_l)
  (def-new-node-pw sti))

(defmacro def-new-node-wf (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-word-t) (v jit-float32-t)))
(def-new-node-wf movi_f)
(def-new-node-wf movi_f_w)

(defmacro def-new-node-wd (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-word-t) (v jit-float64-t)))
(def-new-node-wd movi_d)
(def-new-node-wd movi_d_w)

(defmacro def-new-node-www (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-word-t) (v jit-word-t) (w jit-word-t)))
(defmacro def-new-node-www-pointer0 (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-pointer-t) (v jit-gpr-t) (w jit-gpr-t)))
(defmacro def-new-node-www-pointer2 (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-gpr-t) (v jit-gpr-t) (w jit-pointer-t)))
(def-new-node-www addr)
(def-new-node-www addi)
(def-new-node-www addcr)
(def-new-node-www addci)
(def-new-node-www addxr)
(def-new-node-www addxi)
(def-new-node-www subr)
(def-new-node-www subi)
(def-new-node-www subcr)
(def-new-node-www subci)
(def-new-node-www subxr)
(def-new-node-www subxi)
(def-new-node-www rsbi)
(def-new-node-www mulr)
(def-new-node-www muli)
(def-new-node-www divr)
(def-new-node-www divi)
(def-new-node-www divr_u)
(def-new-node-www divi_u)
(def-new-node-www remr)
(def-new-node-www remi)
(def-new-node-www remr_u)
(def-new-node-www remi_u)
(def-new-node-www andr)
(def-new-node-www andi)
(def-new-node-www orr)
(def-new-node-www ori)
(def-new-node-www xorr)
(def-new-node-www xori)
(def-new-node-www lshr)
(def-new-node-www lshi)
(def-new-node-www rshr)
(def-new-node-www rshi)
(def-new-node-www rshr_u)
(def-new-node-www rshi_u)
(def-new-node-www ltr)
(def-new-node-www lti)
(def-new-node-www ltr_u)
(def-new-node-www lti_u)
(def-new-node-www ler)
(def-new-node-www lei)
(def-new-node-www ler_u)
(def-new-node-www lei_u)
(def-new-node-www eqr)
(def-new-node-www eqi)
(def-new-node-www ger)
(def-new-node-www gei)
(def-new-node-www ger_u)
(def-new-node-www gei_u)
(def-new-node-www gtr)
(def-new-node-www gti)
(def-new-node-www gtr_u)
(def-new-node-www gti_u)
(def-new-node-www ner)
(def-new-node-www nei)
(def-new-node-www ldxr_c)
(def-new-node-www-pointer2 ldxi_c)
(def-new-node-www ldxr_uc)
(def-new-node-www-pointer2 ldxi_uc)
(def-new-node-www ldxr_s)
(def-new-node-www-pointer2 ldxi_s)
(def-new-node-www ldxr_us)
(def-new-node-www-pointer2 ldxi_us)
(def-new-node-www ldxr_i)
(def-new-node-www-pointer2 ldxi_i)
(def-new-node-www stxr_c)
(def-new-node-www-pointer0 stxi_c)
(def-new-node-www stxr_s)
(def-new-node-www-pointer0 stxi_s)
(def-new-node-www stxr_i)
(def-new-node-www-pointer0 stxi_i)
(def-new-node-www addr_f)
(def-new-node-www subr_f)
(def-new-node-www mulr_f)
(def-new-node-www divr_f)
(def-new-node-www ltr_f)
(def-new-node-www ler_f)
(def-new-node-www eqr_f)
(def-new-node-www ger_f)
(def-new-node-www gtr_f)
(def-new-node-www ner_f)
(def-new-node-www unltr_f)
(def-new-node-www unler_f)
(def-new-node-www uneqr_f)
(def-new-node-www unger_f)
(def-new-node-www ungtr_f)
(def-new-node-www ltgtr_f)
(def-new-node-www ordr_f)
(def-new-node-www unordr_f)
(def-new-node-www ldxr_f)
(def-new-node-www-pointer2 ldxi_f)
(def-new-node-www stxr_f)
(def-new-node-www-pointer0 stxi_f)
(def-new-node-www addr_d)
(def-new-node-www subr_d)
(def-new-node-www mulr_d)
(def-new-node-www divr_d)
(def-new-node-www ltr_d)
(def-new-node-www ler_d)
(def-new-node-www eqr_d)
(def-new-node-www ger_d)
(def-new-node-www gtr_d)
(def-new-node-www ner_d)
(def-new-node-www unltr_d)
(def-new-node-www unler_d)
(def-new-node-www uneqr_d)
(def-new-node-www unger_d)
(def-new-node-www ungtr_d)
(def-new-node-www ltgtr_d)
(def-new-node-www ordr_d)
(def-new-node-www unordr_d)
(def-new-node-www ldxr_d)
(def-new-node-www ldxi_d)
(def-new-node-www stxr_d)
(def-new-node-www stxi_d)
(def-new-node-www movr_ww_d)
(def-new-node-www movr_d_ww)
(def-new-node-www rsbr)
(def-new-node-www rsbr_f)
(def-new-node-www rsbr_d)
(if-wordsize-32
  (def-new-node-www ldxr)
  (def-new-node-www-pointer2 ldxi))
(if-wordsize-64
  (def-new-node-www ldxr_ui)
  (def-new-node-www-pointer2 ldxi_ui)
  (def-new-node-www ldxr_l)
  (def-new-node-www-pointer2 ldxi_l)
  (def-new-node-www stxr_l)
  (def-new-node-www-pointer0 stxi_l)
  (def-new-node-www ldxr)
  (def-new-node-www-pointer2 ldxi)
  (def-new-node-www stxr)
  (def-new-node-www-pointer0 stxi))

(defmacro def-new-node-qww (basename)
  `(def-new-node ,basename (jit jit-state) (l jit-int32-t) (h jit-int32-t) (v jit-word-t) (w jit-word-t)))
(def-new-node-qww qmulr)
(def-new-node-qww qmuli)
(def-new-node-qww qmulr_u)
(def-new-node-qww qmuli_u)
(def-new-node-qww qdivr)
(def-new-node-qww qdivi)
(def-new-node-qww qdivr_u)
(def-new-node-qww qdivi_u)

(defmacro def-new-node-wwf (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-int32-t) (v jit-word-t) (w jit-float32-t)))
(def-new-node-wwf addi_f)
(def-new-node-wwf subi_f)
(def-new-node-wwf rsbi_f)
(def-new-node-wwf muli_f)
(def-new-node-wwf divi_f)
(def-new-node-wwf lti_f)
(def-new-node-wwf lei_f)
(def-new-node-wwf eqi_f)
(def-new-node-wwf gei_f)
(def-new-node-wwf gti_f)
(def-new-node-wwf nei_f)
(def-new-node-wwf unlti_f)
(def-new-node-wwf unlei_f)
(def-new-node-wwf uneqi_f)
(def-new-node-wwf ungei_f)
(def-new-node-wwf ungti_f)
(def-new-node-wwf ltgti_f)
(def-new-node-wwf ordi_f)
(def-new-node-wwf unordi_f)

(defmacro def-new-node-wwd (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-int32-t) (v jit-word-t) (w jit-float64-t)))
(def-new-node-wwd addi_d)
(def-new-node-wwd subi_d)
(def-new-node-wwd rsbi_d)
(def-new-node-wwd muli_d)
(def-new-node-wwd divi_d)
(def-new-node-wwd lti_d)
(def-new-node-wwd lei_d)
(def-new-node-wwd eqi_d)
(def-new-node-wwd gei_d)
(def-new-node-wwd gti_d)
(def-new-node-wwd nei_d)
(def-new-node-wwd unlti_d)
(def-new-node-wwd unlei_d)
(def-new-node-wwd uneqi_d)
(def-new-node-wwd ungei_d)
(def-new-node-wwd ungti_d)
(def-new-node-wwd ltgti_d)
(def-new-node-wwd ordi_d)
(def-new-node-wwd unordi_d)
(def-new-node-wwd movi_d_ww)

(defmacro def-new-node-pww (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-pointer-t) (v jit-int32-t) (w jit-word-t)))
(def-new-node-pww bltr)
(def-new-node-pww blti)
(def-new-node-pww bltr_u)
(def-new-node-pww blti_u)
(def-new-node-pww bler)
(def-new-node-pww blei)
(def-new-node-pww bler_u)
(def-new-node-pww blei_u)
(def-new-node-pww beqr)
(def-new-node-pww beqi)
(def-new-node-pww bger)
(def-new-node-pww bgei)
(def-new-node-pww bger_u)
(def-new-node-pww bgei_u)
(def-new-node-pww bgtr)
(def-new-node-pww bgti)
(def-new-node-pww bgtr_u)
(def-new-node-pww bgti_u)
(def-new-node-pww bner)
(def-new-node-pww bnei)
(def-new-node-pww bmsr)
(def-new-node-pww bmsi)
(def-new-node-pww bmcr)
(def-new-node-pww bmci)
(def-new-node-pww boaddr)
(def-new-node-pww boaddi)
(def-new-node-pww boaddr_u)
(def-new-node-pww boaddi_u)
(def-new-node-pww bxaddr)
(def-new-node-pww bxaddi)
(def-new-node-pww bxaddr_u)
(def-new-node-pww bxaddi_u)
(def-new-node-pww bosubr)
(def-new-node-pww bosubi)
(def-new-node-pww bosubr_u)
(def-new-node-pww bosubi_u)
(def-new-node-pww bxsubr)
(def-new-node-pww bxsubi)
(def-new-node-pww bxsubr_u)
(def-new-node-pww bxsubi_u)
(def-new-node-pww bltr_f)
(def-new-node-pww bler_f)
(def-new-node-pww beqr_f)
(def-new-node-pww bger_f)
(def-new-node-pww bgtr_f)
(def-new-node-pww bner_f)
(def-new-node-pww bunltr_f)
(def-new-node-pww bunler_f)
(def-new-node-pww buneqr_f)
(def-new-node-pww bunger_f)
(def-new-node-pww bungtr_f)
(def-new-node-pww bltgtr_f)
(def-new-node-pww bordr_f)
(def-new-node-pww bunordr_f)
(def-new-node-pww bltr_d)
(def-new-node-pww bler_d)
(def-new-node-pww beqr_d)
(def-new-node-pww bger_d)
(def-new-node-pww bgtr_d)
(def-new-node-pww bner_d)
(def-new-node-pww bunltr_d)
(def-new-node-pww bunler_d)
(def-new-node-pww buneqr_d)
(def-new-node-pww bunger_d)
(def-new-node-pww bungtr_d)
(def-new-node-pww bltgtr_d)
(def-new-node-pww bordr_d)
(def-new-node-pww bunordr_d)

(defmacro def-new-node-pwf (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-pointer-t) (v jit-int32-t) (w jit-float32-t)))
(def-new-node-pwf blti_f)
(def-new-node-pwf blei_f)
(def-new-node-pwf beqi_f)
(def-new-node-pwf bgei_f)
(def-new-node-pwf bgti_f)
(def-new-node-pwf bnei_f)
(def-new-node-pwf bunlti_f)
(def-new-node-pwf bunlei_f)
(def-new-node-pwf buneqi_f)
(def-new-node-pwf bungei_f)
(def-new-node-pwf bungti_f)
(def-new-node-pwf bltgti_f)
(def-new-node-pwf bordi_f)
(def-new-node-pwf bunordi_f)

(defmacro def-new-node-pwd (basename)
  `(def-new-node ,basename (jit jit-state) (u jit-pointer-t) (v jit-int32-t) (w jit-float64-t)))
(def-new-node-pwd blti_d)
(def-new-node-pwd blei_d)
(def-new-node-pwd beqi_d)
(def-new-node-pwd bgei_d)
(def-new-node-pwd bgti_d)
(def-new-node-pwd bnei_d)
(def-new-node-pwd bunlti_d)
(def-new-node-pwd bunlei_d)
(def-new-node-pwd buneqi_d)
(def-new-node-pwd bungei_d)
(def-new-node-pwd bungti_d)
(def-new-node-pwd bltgti_d)
(def-new-node-pwd bordi_d)
(def-new-node-pwd bunordi_d)

(defcfun* "fn_jit_arg_register_p" jit-bool (jit jit-state) (node jit-node-t-ptr))
(defcfun* "fn_jit_callee_save_p" jit-bool (jit jit-state) (u jit-int32-t))
(defcfun* "fn_jit_pointer_p" jit-bool (jit jit-state) (ptr jit-pointer-t))

(defcfun* "fn_jit_get_note" jit-bool (jit jit-state) (n jit-pointer-t) (u (:pointer :string)) (v (:pointer :string)) (w (:pointer :string)))

(defcfun* ("fn_jit_disassemble" fn-jit-disassemble-jit) :void (jit jit-state))
(defcfun "fn_jit_set_memory_functions" :void (alloc-function jit-alloc-func-ptr) (realloc-function jit-realloc-func-ptr) (free-function jit-free-func-ptr))
(defcfun "fn_jit_get_memory_functions" :void (alloc-function-ptr (:pointer jit-alloc-func-ptr)) (realloc-function-ptr (:pointer jit-realloc-func-ptr)) (free-function-ptr (:pointer jit-free-func-ptr)))
